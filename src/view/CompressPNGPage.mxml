<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					width="530" height="576" label="压缩PNG" creationComplete="onCreate(event)">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Label left="20" top="18" styleName="BigFont" text="资源路径"/>
	<s:TextInput id="txSrc" left="98" top="15" width="310"/>
	<s:Button id="pbBrowseSrc" left="433" top="15" label="浏览" click="onClick(event)"
			  styleName="BigFont"/>
	
	<s:Label x="20" y="51" styleName="BigFont" text="输出路径"/>
	<s:TextInput id="txDest" left="98" top="48" width="310" enabled="{!isUseSrcPath}"/>
	<s:Button id="pbBrowseDest" x="433" y="49" label="浏览" click="onClick(event)"
			  enabled="{!isUseSrcPath}" styleName="BigFont"/>
	<s:CheckBox left="20" top="73" label="使用源路径" change="{isUseSrcPath = !isUseSrcPath}"
				styleName="BigFont"/>
	
	<mx:HRule y="104" width="500" horizontalCenter="0"/>
	<s:Label left="20" top="115" styleName="BigFont" text="压缩品质"/>
	<s:HSlider id="hsQuality" left="98" top="118" width="310" change="{quality=hsQuality.value}"
			   maximum="100" minimum="1" value="{quality}"/>
	<s:TextInput id="txQuality" left="433" top="111" width="70" change="txQualityChange(event)"
				 restrict="0-9" text="{quality.toString()}" textAlign="center"/>
	
	<s:Button id="pbCompress" top="145" width="100" height="30" label="压缩" click="onClick(event)"
			  horizontalCenter="0" styleName="BigFont"/>
	<s:CheckBox id="cbSingleFile" left="180" top="73" label="合并为单个文件" styleName="BigFont"/>
	<fx:Script>
		<![CDATA[
			import com.worrysprite.utils.FileUtils;
			import enum.ThreadMessageEnum;
			import events.ThreadEvent;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import spark.events.TextOperationEvent;
			
			[Bindable]
			private var isUseSrcPath:Boolean;
			[Bindable]
			private var quality:int = 80;
			
			private var srcDir:File;
			private var destDir:File;
			
			private var popup:ProgressPanel;
			
			private function onCreate(event:FlexEvent):void
			{
				srcDir = new File();
				srcDir.addEventListener(Event.SELECT, onDirSelected);
				destDir = new File();
				destDir.addEventListener(Event.SELECT, onDirSelected);
			}
			
			private function onDirSelected(e:Event):void
			{
				if(e.currentTarget == srcDir)
				{
					txSrc.text = srcDir.nativePath;
				}
				else if(e.currentTarget == destDir)
				{
					txDest.text = destDir.nativePath;
				}
			}
			
			private function onClick(e:MouseEvent):void
			{
				switch (e.target)
				{
					case pbBrowseSrc:
						srcDir.browseForDirectory("选择资源目录");
						break;
					
					case pbBrowseDest:
						destDir.browseForDirectory("选择输出目录");
						break;
					
					case pbCompress:
						compress();
						break;
				}
			}
			
			private function txQualityChange(event:TextOperationEvent):void
			{
				var value:int = int(txQuality.text);
				if (value < 1)
				{
					value = 1;
				}
				else if(value>100)
				{
					value=100;
				}
				quality = value;
				txQuality.text = quality.toString();
			}
			
			private function compress():void
			{
				if (!FileUtils.checkDirValid(txSrc.text, srcDir))
				{
					Alert.show("无效的资源路径", "错误");
					return;
				}
				if (isUseSrcPath)
				{
					destDir.url = srcDir.url;
				}
				else
				{
					if (!FileUtils.checkDirValid(txDest.text, destDir))
					{
						Alert.show("无效的输出路径", "错误");
						return;
					}
				}
				popup = PopUpManager.createPopUp(this, ProgressPanel, true) as ProgressPanel;
				PopUpManager.centerPopUp(popup);
				
				WorkerManager.listener.addEventListener(ThreadEvent.THREAD_STATE, onState);
				WorkerManager.sendMessage([ThreadMessageEnum.COMMAND_COMPRESS_PNG, srcDir.url, destDir.url, hsQuality.value, cbSingleFile.selected]);
			}
			
			private function onState(e:ThreadEvent):void
			{
				var msg:Array = e.msg;
				switch(msg[0])
				{
					case ThreadMessageEnum.STATE_PROGRESS:
						popup.setProgressInfo(msg[1], msg[2], msg[3]);
						break;
						
					case ThreadMessageEnum.STATE_COMPLETE:
						PopUpManager.removePopUp(popup);
						popup = null;
						break;
				}
			}
		]]>
	</fx:Script>
</s:NavigatorContent>
